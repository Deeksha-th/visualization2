
import os
import pandas as pd

ukb_dir = '/project_freenas/3022017.02/UKB'
default_dict = os.path.join(ukb_dir, 'docs', 'Data_Dictionary_Showcase_20200421.csv')
default_headers = os.path.join(ukb_dir, 'phenotypes', 'ukb42006_headers.txt')

def lookup_UKB(field_ids=None, fields=None, data_dict=default_dict, 
               categories=None):
    """
        Returns a dataframe containing UKB field ids and field descriptions. 
        This should be done on the basis of field id, name or category
        
            :param field_ids: list of field identifiers
            :param fields: list of field names
            :param categories: a list of categories to return
    """
    
    if data_dict is None:
        print('Using default dictionary:', default_dict)
        data_dict = default_dict
    
    df = pd.read_csv(data_dict)
   
    out = pd.DataFrame(columns=['Field', 'FieldID'])
    if field_ids is not None:
        for fid in field_ids:
            if type(fid) is str:
                fid = int(fid.split('-')[0])
            out = out.append(df[df['FieldID'] == fid] [['Field', 'FieldID']])
    elif fields is not None:
        for field in fields:
            out = out.append(df[df['Field'].str.match(field)] [['Field', 'FieldID']])
    elif categories is not None:
        for category in categories:
            out = out.append(df[df['Category'] == category] [['Field', 'FieldID']])
    
    return out

def get_variables_UKB(csv_file_path, fields_code_list, fields_name_list, 
                      save_path = None, drop_nans = True):
    '''
    
    Example:
        csv_file_path = '/project_freenas/3022017.02/UKB/phenotypes/ukb35187.csv'
        save_path =  '/project_freenas/3022017.02/UKB/phenotypes/test.csv'
        fields_code_list = ['21003-2.0', '31-0.0', '54-2.0']
        fileds_name_list = ['age', 'gender', 'site_id']
        
        covariates, subs = get_variables_UKB(csv_file_path, fields_code_list, 
                                             fileds_name_list, save_path)
    '''
    
    ukbb_covariates = pd.read_csv(csv_file_path, encoding= 'unicode_escape', 
                                   usecols=['eid'] + fields_code_list)
    if drop_nans:
        ukbb_covariates = ukbb_covariates.dropna()
    ukbb_subs = list(ukbb_covariates['eid'])
    ukbb_subs = [str(u) for u in ukbb_subs]
    ukbb_covariates['eid'] = ukbb_subs
    ukbb_covariates = ukbb_covariates.set_index('eid')
    c = dict()
    for i, code in enumerate(fields_code_list):
        c[code] = fields_name_list[i]
    ukbb_covariates = ukbb_covariates.rename(columns=c)
    if save_path is not None:
        ukbb_covariates.to_csv(save_path)
    return ukbb_covariates, ukbb_subs

def get_col_ids_UKB(field_ids=None, headers = default_headers):
     
    """
        Returns a dataframe containing the full UKB field ids that are 
        available in the local database (including instance and array indices).
        This uses a header file which can be generated by running: 
            
            $ head -n 1 /path/2/your/UKB/ukbXXXXX.csv > ukbXXXX_Headers.txt
        
            :param field_ids: list of field identifiers to search
            :param headers: header file
    """
    
    
    col_ids = pd.read_csv(default_headers).columns.to_list()
    full_fids = []
    for fid in field_ids:
        fids = [f for f in col_ids if str(fid) in f]
        full_fids.extend(fids)
        
    return full_fids